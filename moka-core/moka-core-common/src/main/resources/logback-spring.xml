<?xml version="1.0" encoding="UTF-8"?>

<!-- 30초마다 설정 파일의 변경을 확인한다. 파일이 변경되면 다시 로딩한다 -->
<configuration scan="true" scanPeriod="30 seconds">

	<property resource="moka_logger.properties" />
	
	<if condition='p("spring.profiles.active").equals("")'>
		<then>
			<property resource="application.properties" />
		</then>
		<else>
			<springProfile name="stg">
			    <property resource='application-stg.properties' />
			</springProfile>
			<springProfile name="prod">
			    <property resource='application-prod.properties' />
			</springProfile>
		</else>
	</if>


	<!-- log file path -->
	<property name="LOG_PATH" value="${logging.path}" />
	<!-- log file name -->
	<property name="LOG_FILE_NAME" value="${logging.file}" />
	<!-- log days -->
	<property name="LOG_DAYS" value="${logging.file.max-history}" />
	<!-- log filesize log -->
	<property name="LOG_FILESIZE_LOG"
		value="${logging.file.max-size}" />
	<!-- pattern -->
	<property name="LOG_PATTERN"
		value="${logging.pattern.console}" />
	<property name="LOG_MDC_PATTERN"
		value="${logging.pattern.mdc}" />
	<property name="LOG_ACTION_PATTERN"
		value="${logging.pattern.action}" />
	<property name="LOG_ROOT_LEVEL"
		value="${logging.root.level}" />

	<!-- console log -->
	<appender name="console"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- 로그 파일 생성 관련 -->
	<!-- 로그 모드 -->
	<!-- log file -->
	<!-- console을 통해 wildfly에서 생성하는 로그파일 설정을 따름 -->
	<!--로컬에서만 server.log 파일 생성 -->
	<if condition='p("spring.profiles.active").equals("")'>
		<then>
	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/${LOG_FILE_NAME}</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_FILESIZE_LOG}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>${LOG_DAYS}</maxHistory>
		</rollingPolicy>
		<!--<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>${LOG_FILESIZE_LOG}</MaxFileSize>
		</triggeringPolicy>-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>
		</then>
	</if>

	<!-- system log file -->
	<!--<appender name="SYSTEM-FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/system.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/system.%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<maxHistory>${LOG_DAYS}</maxHistory>
		</rollingPolicy>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>${LOG_FILESIZE_LOG}</MaxFileSize>
		</triggeringPolicy>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator
				class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
				<marker>SYSTEM</marker>
			</evaluator>
			<OnMatch>ACCEPT</OnMatch>
			<OnMismatch>DENY</OnMismatch>
		</filter>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>-->

	<!-- action log file -->
	<appender name="ACTION-FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/action.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/action.log.%d{yyyy-MM-dd}
			</fileNamePattern>
			<!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_FILESIZE_LOG}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>-->
			<maxHistory>${LOG_DAYS}</maxHistory>
		</rollingPolicy>
		<!--<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>${LOG_FILESIZE_LOG}</MaxFileSize>
		</triggeringPolicy>-->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator
				class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
				<marker>ACTION</marker>
			</evaluator>
			<OnMatch>ACCEPT</OnMatch>
			<OnMismatch>DENY</OnMismatch>
		</filter>
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_ACTION_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- action log file -->
	<appender name="USER-SIFT"
		class="ch.qos.logback.classic.sift.SiftingAppender">
		<discriminator>
			<key>userId</key>
			<defaultValue>unknown</defaultValue>
		</discriminator>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator
				class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
				<marker>USER</marker>
			</evaluator>
			<OnMatch>ACCEPT</OnMatch>
			<OnMismatch>DENY</OnMismatch>
		</filter>
		<sift>
			<!-- log file -->
			<appender name="USER-FILE"
				class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_PATH}/user.log</file>
				<rollingPolicy
					class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${LOG_PATH}/user.log.%d{yyyy-MM-dd}.%i
					</fileNamePattern>
					<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
						<maxFileSize>${LOG_FILESIZE_LOG}</maxFileSize>
					</timeBasedFileNamingAndTriggeringPolicy>
					<maxHistory>${LOG_DAYS}</maxHistory>
				</rollingPolicy>
				<!--<triggeringPolicy
					class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
					<MaxFileSize>${LOG_FILESIZE_LOG}</MaxFileSize>
				</triggeringPolicy>-->
				<encoder
					class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
					<pattern>${LOG_MDC_PATTERN}</pattern>
				</encoder>
			</appender>
		</sift>
	</appender>

	<root level="${LOG_ROOT_LEVEL}">
		<appender-ref ref="console" />
		<appender-ref ref="ACTION-FILE" />
		<appender-ref ref="USER-SIFT" />
		<!--로컬에서만 server.log 파일 생성 -->
		<if condition='p("spring.profiles.active").equals("")'>
		<then>
			<appender-ref ref="FILE" />
		</then>
		</if>
	</root>

</configuration>
